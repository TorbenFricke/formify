{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An easy-to-use Python UI Framework on top of Qt (PySide6). Simple things are simple, hard things are not any harder than they are in Qt. Features Cross Platform: Tested on Windows and macOS Low Boilerplate: Save, load and autosave functionality out of the box A unified API to set and retrieve data in UI elements Layout using tabs, segments, a sidebar and a grid system Row , Col Singe instance enforcement Installation UI based on PyInstaller (Windows only) Install Install formify using PyPi: pip install formify First App Write your first App featuring a text area with save, load, and autosave functionality. from formify import * ui = ControlTextarea ( \"Write Here\" , variable_name = \"text\" ) MainWindow ( ui , title = \"First App\" , margin = 8 ) Windows macOS More Examples Check out the Gallery for more examples.","title":"Overview"},{"location":"#features","text":"Cross Platform: Tested on Windows and macOS Low Boilerplate: Save, load and autosave functionality out of the box A unified API to set and retrieve data in UI elements Layout using tabs, segments, a sidebar and a grid system Row , Col Singe instance enforcement Installation UI based on PyInstaller (Windows only)","title":"Features"},{"location":"#install","text":"Install formify using PyPi: pip install formify","title":"Install"},{"location":"#first-app","text":"Write your first App featuring a text area with save, load, and autosave functionality. from formify import * ui = ControlTextarea ( \"Write Here\" , variable_name = \"text\" ) MainWindow ( ui , title = \"First App\" , margin = 8 ) Windows macOS","title":"First App"},{"location":"#more-examples","text":"Check out the Gallery for more examples.","title":"More Examples"},{"location":"localization/","text":"Localization There are two ways of localizing your code. First, the Translator and a simple language switch . Whichever option you choose, the localization happens on start up. If you change the language, the program has to be restarted. formify.localization.Translator By the default, the system language is used (i.e. \"en\", \"de\", \"fr\", ...) add ( self , id : str , ** langauges ) Add translations for an id. You can use any string as `id. translator = Translator() translator.add(\"button_open\", en=\"Open\", de=\"\u00d6ffnen\"}) translator.language = \"de\" print(translator(\"button_open\")) # returns \"\u00d6ffnen\" __call__ ( self , id : str ) special Grab the translation for id based on the current language. Always returns a string. If no translation for the current language translator.language is provided, the id is returned. translator(\"button_open\") load ( self , file_name : str ) Reads all translations into a JSON file. save ( self , file_name : str ) Dumps all translations into a JSON file. formify . localization . make_language_switch ( translator : Translator , language_order : list ) -> < built - in function callable > Makes a function, that selects the argument corresponding to the current language. Best read the example below: translator = Translator() switch = make_language_switch(translator, [\"en\", \"de\"]) translator.language = \"en\" print(switch(\"open\", \"\u00f6ffnen\")) # prints \"open\" translator.language = \"de\" print(switch(\"open\", \"\u00f6ffnen\")) # prints \"\u00f6ffnen\" # set the text of a button ControlButton(switch(\"open\", \"\u00f6ffnen\")) Parameters: Name Type Description Default translator Translator used to determine the current language required language_order list language order of the language switch arguments required formify . localization . default_translator ( * args , ** kwargs ) -> Translator Returns a Translator , populated with translations for default menu items (Open, Close, ...) for german and english. args and kwargs are passed to the Translator( args, **kwargs).","title":"Localization"},{"location":"localization/#localization","text":"There are two ways of localizing your code. First, the Translator and a simple language switch . Whichever option you choose, the localization happens on start up. If you change the language, the program has to be restarted.","title":"Localization"},{"location":"localization/#formify.localization.Translator","text":"By the default, the system language is used (i.e. \"en\", \"de\", \"fr\", ...)","title":"Translator"},{"location":"localization/#formify.localization.Translator.add","text":"Add translations for an id. You can use any string as `id. translator = Translator() translator.add(\"button_open\", en=\"Open\", de=\"\u00d6ffnen\"}) translator.language = \"de\" print(translator(\"button_open\")) # returns \"\u00d6ffnen\"","title":"add()"},{"location":"localization/#formify.localization.Translator.__call__","text":"Grab the translation for id based on the current language. Always returns a string. If no translation for the current language translator.language is provided, the id is returned. translator(\"button_open\")","title":"__call__()"},{"location":"localization/#formify.localization.Translator.load","text":"Reads all translations into a JSON file.","title":"load()"},{"location":"localization/#formify.localization.Translator.save","text":"Dumps all translations into a JSON file.","title":"save()"},{"location":"localization/#formify.localization.make_language_switch","text":"Makes a function, that selects the argument corresponding to the current language. Best read the example below: translator = Translator() switch = make_language_switch(translator, [\"en\", \"de\"]) translator.language = \"en\" print(switch(\"open\", \"\u00f6ffnen\")) # prints \"open\" translator.language = \"de\" print(switch(\"open\", \"\u00f6ffnen\")) # prints \"\u00f6ffnen\" # set the text of a button ControlButton(switch(\"open\", \"\u00f6ffnen\")) Parameters: Name Type Description Default translator Translator used to determine the current language required language_order list language order of the language switch arguments required","title":"make_language_switch()"},{"location":"localization/#formify.localization.default_translator","text":"Returns a Translator , populated with translations for default menu items (Open, Close, ...) for german and english. args and kwargs are passed to the Translator( args, **kwargs).","title":"default_translator()"},{"location":"gallery/material-editor/","text":"An editor GUI for the magnetic properties of materials. The NonLinearUI is implmented in an object-oriented way. Screenshots Non-Linear Material Linear Material Source from formify import * import json import numpy as np def save_material (): fn = tools . save_dialog ( \"Save Material\" ) if not fn : return with open ( fn , \"w+\" ) as f : json . dump ( material_form . value , f ) def load_current_material (): fn = tools . open_dialog ( \"Load Material\" ) if not fn : return with open ( fn ) as f : material_form . value = json . loads ( f . read ()) def print_material (): print ( json . dumps ( material_form . value , indent = 2 )) class NonLinearUI : def __init__ ( self ): self . plot = ControlMatplotlib () self . table = ControlTable ( label = \"Magnetization Curve\" , columns = [ \"H in A/m\" , \"B in T\" ], column_types = [ float , float ], variable_name = \"magnetization_curve\" , ) self . ui = Row ( self . table , self . plot , ) self . draw = tools . BackgroundMethod ( self . _draw , lazy = True ) self . table . change . subscribe ( self . draw ) def _draw ( self ): fig = self . plot . fig fig . clf () ax = fig . gca () B_H_data = np . array ( self . table . value ) ax . plot ( B_H_data [:, 0 ], B_H_data [:, 1 ]) ax . set_xlabel ( \"H in A/m\" ) ax . set_ylabel ( \"B in T\" ) ax . set_xscale ( \"log\" ) self . plot . draw () checkbox_linear = ControlCheckbox ( \"Linear B(H) characteristic\" , variable_name = \"is_linear\" ) # using ColSpaceBetween with a placeholder at the and makes sure the linear ui can expand just as the non-linear ui ui_linear = ColSpaceBetween ( ControlFloat ( \"Relative permeability \u03bcr\" , value = 1 , variable_name = \"mur\" ), Placeholder (), ) material_form = Form ( Segment ( h3 ( \"Material\" ), ControlText ( \"Name\" , variable_name = \"name\" ), ControlFloatMega ( \"Conductivity in MS/m\" , variable_name = \"conductivity\" ), ConditionalForm ({ True : ui_linear , False : NonLinearUI () . ui , }, condition_control = checkbox_linear , # \"__flatten__\" is a special variable name: # keys and values from are set in the parent level variable_name = \"__flatten__\" ), Row ( ControlButton ( \"Save Material...\" , save_material ), ControlButton ( \"Load Material...\" , load_current_material ), ControlButton ( \"Print Material\" , print_material ), ), )) materials_form = ListForm ( tools . maximize ( material_form ), variable_name = \"materials\" , display_name_callback = lambda material : material [ 'name' ], ) MainWindow ( materials_form , margin = 8 )","title":"Material Editor"},{"location":"gallery/material-editor/#screenshots","text":"Non-Linear Material Linear Material","title":"Screenshots"},{"location":"gallery/material-editor/#source","text":"from formify import * import json import numpy as np def save_material (): fn = tools . save_dialog ( \"Save Material\" ) if not fn : return with open ( fn , \"w+\" ) as f : json . dump ( material_form . value , f ) def load_current_material (): fn = tools . open_dialog ( \"Load Material\" ) if not fn : return with open ( fn ) as f : material_form . value = json . loads ( f . read ()) def print_material (): print ( json . dumps ( material_form . value , indent = 2 )) class NonLinearUI : def __init__ ( self ): self . plot = ControlMatplotlib () self . table = ControlTable ( label = \"Magnetization Curve\" , columns = [ \"H in A/m\" , \"B in T\" ], column_types = [ float , float ], variable_name = \"magnetization_curve\" , ) self . ui = Row ( self . table , self . plot , ) self . draw = tools . BackgroundMethod ( self . _draw , lazy = True ) self . table . change . subscribe ( self . draw ) def _draw ( self ): fig = self . plot . fig fig . clf () ax = fig . gca () B_H_data = np . array ( self . table . value ) ax . plot ( B_H_data [:, 0 ], B_H_data [:, 1 ]) ax . set_xlabel ( \"H in A/m\" ) ax . set_ylabel ( \"B in T\" ) ax . set_xscale ( \"log\" ) self . plot . draw () checkbox_linear = ControlCheckbox ( \"Linear B(H) characteristic\" , variable_name = \"is_linear\" ) # using ColSpaceBetween with a placeholder at the and makes sure the linear ui can expand just as the non-linear ui ui_linear = ColSpaceBetween ( ControlFloat ( \"Relative permeability \u03bcr\" , value = 1 , variable_name = \"mur\" ), Placeholder (), ) material_form = Form ( Segment ( h3 ( \"Material\" ), ControlText ( \"Name\" , variable_name = \"name\" ), ControlFloatMega ( \"Conductivity in MS/m\" , variable_name = \"conductivity\" ), ConditionalForm ({ True : ui_linear , False : NonLinearUI () . ui , }, condition_control = checkbox_linear , # \"__flatten__\" is a special variable name: # keys and values from are set in the parent level variable_name = \"__flatten__\" ), Row ( ControlButton ( \"Save Material...\" , save_material ), ControlButton ( \"Load Material...\" , load_current_material ), ControlButton ( \"Print Material\" , print_material ), ), )) materials_form = ListForm ( tools . maximize ( material_form ), variable_name = \"materials\" , display_name_callback = lambda material : material [ 'name' ], ) MainWindow ( materials_form , margin = 8 )","title":"Source"},{"location":"gallery/matplotlib/","text":"A matplolib figure embedded in a formify GUI. The UI changes based on the selected shape. A Circle only shows an input for the radius, while the rectangle shows controls for width, height and angle. The list containing the shapes can be reordered using drag and drop. Drawing in matplotlib happens in a background thread ( tools.BackgroundMethod ) to keep the UI responsive. Screenshot Source shapes_gui.py shapes.py from formify import * import copy # import shapes.py import shapes form = Form ( Col ( Row ( ControlFloat ( variable_name = \"x\" ), ControlFloat ( variable_name = \"y\" ), ), ControlText ( variable_name = \"color\" , value = \"red\" ), ConditionalForm ({ \"rectangle\" : Col ( ControlFloat ( variable_name = \"width\" ), ControlFloat ( variable_name = \"height\" ), ControlFloat ( \"Angle in \u00b0\" , variable_name = \"angle\" ), ), \"circle\" : Col ( ControlFloat ( variable_name = \"radius\" ), ), \"n_gon\" : Col ( ControlInt ( variable_name = \"corners\" ), ControlFloat ( variable_name = \"radius\" ), ), \"star\" : Col ( ControlInt ( variable_name = \"corners\" ), ControlFloat ( variable_name = \"inner_radius\" ), ControlFloat ( variable_name = \"outer_radius\" ), ), }, variable_name = \"__flatten__\" ), ) ) list_form = ListForm ( form , display_name_callback = lambda x : f ' { x [ \"type\" ] } ( { x [ \"color\" ] } )' , variable_name = \"list_form\" ) plot = ControlMatplotlib () def _draw (): # setup plot . fig . clear () ax = plot . fig . subplots () ax . set_aspect ( 'equal' ) # plotting for data in copy . deepcopy ( list_form . value ): func = getattr ( shapes , data . pop ( \"type\" )) func ( ax , ** data ) # show ax . plot () plot . draw () draw = tools . BackgroundMethod ( _draw , lazy = True ) list_form . change . subscribe ( draw ) tools . maximize ( list_form ) ui = Row ( SegmentLight ( h2 ( \"Shapes\" ), list_form , ), plot ) MainWindow ( ui , margin = 8 ) import matplotlib.pyplot as plt import numpy as np import cmath def rectangle ( ax , x , y , width , height , angle , color ): ax . add_patch ( plt . Rectangle (( x , y ), width , height , angle = angle , color = color ) ) def circle ( ax , x , y , radius , color ): ax . add_patch ( plt . Circle (( x , y ), radius , color = color ) ) def polygon ( ax , xs , ys , closed , color ): ax . add_patch ( plt . Polygon ( np . array ([ xs , ys ]) . T , closed = closed , color = color ) ) def star ( ax , x , y , corners , inner_radius , outer_radius , color ): if corners < 2 : return angles_outer = np . linspace ( 0 , 2 * np . pi , corners , endpoint = False ) angles_inner = angles_outer + 2 * np . pi / corners / 2 center = x + 1. j * y ps = [] for angle_inner , angle_outer in zip ( angles_inner , angles_outer ): ps . append ( cmath . rect ( outer_radius , angle_outer ) + center ) ps . append ( cmath . rect ( inner_radius , angle_inner ) + center ) ps = np . array ( ps ) polygon ( ax , ps . real , ps . imag , closed = True , color = color ) def n_gon ( ax , x , y , corners , radius , color ): if corners < 2 : return angles = np . linspace ( 0 , 2 * np . pi , corners , endpoint = False ) center = x + 1. j * y ps = [ cmath . rect ( radius , angle ) + center for angle in angles ] ps = np . array ( ps ) polygon ( ax , ps . real , ps . imag , closed = True , color = color ) if __name__ == \"__main__\" : # setup ax = plt . subplots ()[ 1 ] ax . set_aspect ( 'equal' ) # create patches rectangle ( ax , 1 , 1 , 1 , 2 , 0 , \"b\" ) circle ( ax , 2 , 3 , 1 , \"r\" ) star ( ax , 2 , 0 , 12 , 0.7 , 2 , \"k\" ) n_gon ( ax , 0 , 2 , 5 , 1 , \"yellow\" ) # plotting ax . plot () plt . show ()","title":"Matplotlib"},{"location":"gallery/matplotlib/#screenshot","text":"","title":"Screenshot"},{"location":"gallery/matplotlib/#source","text":"shapes_gui.py shapes.py from formify import * import copy # import shapes.py import shapes form = Form ( Col ( Row ( ControlFloat ( variable_name = \"x\" ), ControlFloat ( variable_name = \"y\" ), ), ControlText ( variable_name = \"color\" , value = \"red\" ), ConditionalForm ({ \"rectangle\" : Col ( ControlFloat ( variable_name = \"width\" ), ControlFloat ( variable_name = \"height\" ), ControlFloat ( \"Angle in \u00b0\" , variable_name = \"angle\" ), ), \"circle\" : Col ( ControlFloat ( variable_name = \"radius\" ), ), \"n_gon\" : Col ( ControlInt ( variable_name = \"corners\" ), ControlFloat ( variable_name = \"radius\" ), ), \"star\" : Col ( ControlInt ( variable_name = \"corners\" ), ControlFloat ( variable_name = \"inner_radius\" ), ControlFloat ( variable_name = \"outer_radius\" ), ), }, variable_name = \"__flatten__\" ), ) ) list_form = ListForm ( form , display_name_callback = lambda x : f ' { x [ \"type\" ] } ( { x [ \"color\" ] } )' , variable_name = \"list_form\" ) plot = ControlMatplotlib () def _draw (): # setup plot . fig . clear () ax = plot . fig . subplots () ax . set_aspect ( 'equal' ) # plotting for data in copy . deepcopy ( list_form . value ): func = getattr ( shapes , data . pop ( \"type\" )) func ( ax , ** data ) # show ax . plot () plot . draw () draw = tools . BackgroundMethod ( _draw , lazy = True ) list_form . change . subscribe ( draw ) tools . maximize ( list_form ) ui = Row ( SegmentLight ( h2 ( \"Shapes\" ), list_form , ), plot ) MainWindow ( ui , margin = 8 ) import matplotlib.pyplot as plt import numpy as np import cmath def rectangle ( ax , x , y , width , height , angle , color ): ax . add_patch ( plt . Rectangle (( x , y ), width , height , angle = angle , color = color ) ) def circle ( ax , x , y , radius , color ): ax . add_patch ( plt . Circle (( x , y ), radius , color = color ) ) def polygon ( ax , xs , ys , closed , color ): ax . add_patch ( plt . Polygon ( np . array ([ xs , ys ]) . T , closed = closed , color = color ) ) def star ( ax , x , y , corners , inner_radius , outer_radius , color ): if corners < 2 : return angles_outer = np . linspace ( 0 , 2 * np . pi , corners , endpoint = False ) angles_inner = angles_outer + 2 * np . pi / corners / 2 center = x + 1. j * y ps = [] for angle_inner , angle_outer in zip ( angles_inner , angles_outer ): ps . append ( cmath . rect ( outer_radius , angle_outer ) + center ) ps . append ( cmath . rect ( inner_radius , angle_inner ) + center ) ps = np . array ( ps ) polygon ( ax , ps . real , ps . imag , closed = True , color = color ) def n_gon ( ax , x , y , corners , radius , color ): if corners < 2 : return angles = np . linspace ( 0 , 2 * np . pi , corners , endpoint = False ) center = x + 1. j * y ps = [ cmath . rect ( radius , angle ) + center for angle in angles ] ps = np . array ( ps ) polygon ( ax , ps . real , ps . imag , closed = True , color = color ) if __name__ == \"__main__\" : # setup ax = plt . subplots ()[ 1 ] ax . set_aspect ( 'equal' ) # create patches rectangle ( ax , 1 , 1 , 1 , 2 , 0 , \"b\" ) circle ( ax , 2 , 3 , 1 , \"r\" ) star ( ax , 2 , 0 , 12 , 0.7 , 2 , \"k\" ) n_gon ( ax , 0 , 2 , 5 , 1 , \"yellow\" ) # plotting ax . plot () plt . show ()","title":"Source"},{"location":"gallery/people/","text":"A basic editor for personal data. Screenshots List Form Table Data Model The data model between the ListForm and ControlTable implementation is different. The ListForm workes with a list of dicts, whereas the ControlTable uses a 2D list. List Form Table { \"people\" : [ { \"first_name\" : \"Nicola \" , \"surname\" : \"Hailee\" , \"phone\" : \"+1 544 554 335\" , \"age\" : 32 , \"role\" : \"Admin\" }, { \"first_name\" : \"James \" , \"surname\" : \"Munir\" , \"phone\" : \"+1 142 512 852\" , \"age\" : 22 , \"role\" : \"User\" } ] } { \"people_table\" : [ [ \"Nicola \" , \"Hailee\" , \"+1 544 554 335\" , 32 , \"Admin\" ], [ \"James \" , \"Munir\" , \"+1 142 512 852\" , 22 , \"User\" ] ] } Source from formify import * # Option 1: A list form with a person form person_form = Form ( Col ( ControlText ( \"First Name\" , variable_name = \"first_name\" ), ControlText ( \"Surname\" , variable_name = \"surname\" ), ControlText ( \"Phone Number\" , variable_name = \"phone\" ), ControlInt ( \"Age\" , variable_name = \"age\" ), ControlSelect ( \"Role\" , items = [ \"User\" , \"Admin\" ], variable_name = \"role\" , value = \"User\" ) )) ui_list = ListForm ( person_form , variable_name = \"people\" , display_name_callback = lambda person : f \" { person [ 'first_name' ] } { person [ 'surname' ] } - { person [ 'role' ] } \" ) # Option 2: A table ui_table = ControlTable ( label = \"\" , columns = [ \"First Name\" , \"Surname\" , \"Phone Number\" , \"Age\" , \"Role\" ], column_types = [ str , str , str , int , ( \"User\" , \"Admin\" )], variable_name = \"people_table\" ) ui = SidebarContentView ({ \"ListForm\" : ui_list , \"Table\" : ui_table , }) MainWindow ( ui )","title":"People Editor"},{"location":"gallery/people/#screenshots","text":"List Form Table","title":"Screenshots"},{"location":"gallery/people/#data-model","text":"The data model between the ListForm and ControlTable implementation is different. The ListForm workes with a list of dicts, whereas the ControlTable uses a 2D list. List Form Table { \"people\" : [ { \"first_name\" : \"Nicola \" , \"surname\" : \"Hailee\" , \"phone\" : \"+1 544 554 335\" , \"age\" : 32 , \"role\" : \"Admin\" }, { \"first_name\" : \"James \" , \"surname\" : \"Munir\" , \"phone\" : \"+1 142 512 852\" , \"age\" : 22 , \"role\" : \"User\" } ] } { \"people_table\" : [ [ \"Nicola \" , \"Hailee\" , \"+1 544 554 335\" , 32 , \"Admin\" ], [ \"James \" , \"Munir\" , \"+1 142 512 852\" , 22 , \"User\" ] ] }","title":"Data Model"},{"location":"gallery/people/#source","text":"from formify import * # Option 1: A list form with a person form person_form = Form ( Col ( ControlText ( \"First Name\" , variable_name = \"first_name\" ), ControlText ( \"Surname\" , variable_name = \"surname\" ), ControlText ( \"Phone Number\" , variable_name = \"phone\" ), ControlInt ( \"Age\" , variable_name = \"age\" ), ControlSelect ( \"Role\" , items = [ \"User\" , \"Admin\" ], variable_name = \"role\" , value = \"User\" ) )) ui_list = ListForm ( person_form , variable_name = \"people\" , display_name_callback = lambda person : f \" { person [ 'first_name' ] } { person [ 'surname' ] } - { person [ 'role' ] } \" ) # Option 2: A table ui_table = ControlTable ( label = \"\" , columns = [ \"First Name\" , \"Surname\" , \"Phone Number\" , \"Age\" , \"Role\" ], column_types = [ str , str , str , int , ( \"User\" , \"Admin\" )], variable_name = \"people_table\" ) ui = SidebarContentView ({ \"ListForm\" : ui_list , \"Table\" : ui_table , }) MainWindow ( ui )","title":"Source"}]}